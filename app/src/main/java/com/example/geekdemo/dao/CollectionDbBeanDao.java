package com.example.geekdemo.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.geekdemo.bean.CollectionDbBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "COLLECTION_DB_BEAN".
 */
public class CollectionDbBeanDao extends AbstractDao <CollectionDbBean, Long> {

    public static final String TABLENAME = "COLLECTION_DB_BEAN";

    public CollectionDbBeanDao(DaoConfig config) {
        super(config);
    }


    public CollectionDbBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"COLLECTION_DB_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: Lid
                "\"ID\" TEXT," + // 1: id
                "\"TITLE\" TEXT," + // 2: title
                "\"IMG_URL\" TEXT," + // 3: imgUrl
                "\"FROM_TYPE\" INTEGER NOT NULL );"); // 4: fromType
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COLLECTION_DB_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CollectionDbBean entity) {
        stmt.clearBindings();

        Long Lid = entity.getLid();
        if (Lid != null) {
            stmt.bindLong(1, Lid);
        }

        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }

        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }

        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(4, imgUrl);
        }
        stmt.bindLong(5, entity.getFromType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CollectionDbBean entity) {
        stmt.clearBindings();

        Long Lid = entity.getLid();
        if (Lid != null) {
            stmt.bindLong(1, Lid);
        }

        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }

        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }

        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(4, imgUrl);
        }
        stmt.bindLong(5, entity.getFromType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public CollectionDbBean readEntity(Cursor cursor, int offset) {
        CollectionDbBean entity = new CollectionDbBean( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Lid
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // imgUrl
                cursor.getInt(offset + 4) // fromType
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, CollectionDbBean entity, int offset) {
        entity.setLid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImgUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFromType(cursor.getInt(offset + 4));
    }

    @Override
    protected final Long updateKeyAfterInsert(CollectionDbBean entity, long rowId) {
        entity.setLid(rowId);
        return rowId;
    }

    @Override
    public Long getKey(CollectionDbBean entity) {
        if (entity != null) {
            return entity.getLid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CollectionDbBean entity) {
        return entity.getLid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity CollectionDbBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Lid = new Property(0, Long.class, "Lid", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property ImgUrl = new Property(3, String.class, "imgUrl", false, "IMG_URL");
        public final static Property FromType = new Property(4, int.class, "fromType", false, "FROM_TYPE");
    }

}
